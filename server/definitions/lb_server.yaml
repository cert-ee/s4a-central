paths:
  '/users/{id}/accessTokens/{fk}':
    get:
      tags:
        - user
      summary: Find a related item by id for accessTokens.
      operationId: user.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
    delete:
      tags:
        - user
      summary: Delete a related item by id for accessTokens.
      operationId: user.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - user
      summary: Update a related item by id for accessTokens.
      operationId: user.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/accessToken'
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
  '/users/{id}/roles/{fk}':
    get:
      tags:
        - user
      summary: Find a related item by id for roles.
      operationId: user.prototype.__findById__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
    delete:
      tags:
        - user
      summary: Delete a related item by id for roles.
      operationId: user.prototype.__destroyById__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - user
      summary: Update a related item by id for roles.
      operationId: user.prototype.__updateById__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/role'
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
  '/users/{id}/roles/rel/{fk}':
    put:
      tags:
        - user
      summary: Add a related item by id for roles.
      operationId: user.prototype.__link__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/roleMapping'
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/roleMapping'
      deprecated: false
    delete:
      tags:
        - user
      summary: Remove the roles relation to an item by id.
      operationId: user.prototype.__unlink__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - user
      summary: Check the existence of roles relation to an item by id.
      operationId: user.prototype.__exists__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/users/{id}/accessTokens':
    get:
      tags:
        - user
      summary: Queries accessTokens of user.
      operationId: user.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/accessToken'
      deprecated: false
    post:
      tags:
        - user
      summary: Creates a new instance in accessTokens of this model.
      operationId: user.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/accessToken'
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/accessToken'
      deprecated: false
    delete:
      tags:
        - user
      summary: Deletes all accessTokens of this model.
      operationId: user.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/users/{id}/accessTokens/count':
    get:
      tags:
        - user
      summary: Counts accessTokens of user.
      operationId: user.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/users/{id}/roles':
    get:
      tags:
        - user
      summary: Queries roles of user.
      operationId: user.prototype.__get__roles
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/role'
      deprecated: false
    post:
      tags:
        - user
      summary: Creates a new instance in roles of this model.
      operationId: user.prototype.__create__roles
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/role'
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
    delete:
      tags:
        - user
      summary: Deletes all roles of this model.
      operationId: user.prototype.__delete__roles
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/users/{id}/roles/count':
    get:
      tags:
        - user
      summary: Counts roles of user.
      operationId: user.prototype.__count__roles
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /users:
    post:
      tags:
        - user
      summary: Create a new instance of the model and persist it into the data source.
      operationId: user.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    patch:
      tags:
        - user
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: user.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    put:
      tags:
        - user
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: user.replaceOrCreate__put_users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    get:
      tags:
        - user
      summary: Find all instances of the model matched by filter from the data source.
      operationId: user.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
      deprecated: false
  /users/replaceOrCreate:
    post:
      tags:
        - user
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: user.replaceOrCreate__post_users_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  /users/upsertWithWhere:
    post:
      tags:
        - user
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: user.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  '/users/{id}/exists':
    get:
      tags:
        - user
      summary: Check whether a model instance exists in the data source.
      operationId: 'user.exists__get_users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/users/{id}':
    head:
      tags:
        - user
      summary: Check whether a model instance exists in the data source.
      operationId: 'user.exists__head_users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - user
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: user.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    put:
      tags:
        - user
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'user.replaceById__put_users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    delete:
      tags:
        - user
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: user.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - user
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: user.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user'
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  '/users/{id}/replace':
    post:
      tags:
        - user
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'user.replaceById__post_users_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  /users/findOne:
    get:
      tags:
        - user
      summary: Find first instance of the model matched by filter from the data source.
      operationId: user.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  /users/update:
    post:
      tags:
        - user
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: user.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /users/count:
    get:
      tags:
        - user
      summary: Count instances of the model matched by where from the data source.
      operationId: user.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /users/login:
    post:
      tags:
        - user
      summary: Login a user with username/email and password.
      operationId: user.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /users/logout:
    post:
      tags:
        - user
      summary: Logout a user with access token.
      operationId: user.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/users/{id}/verify':
    post:
      tags:
        - user
      summary: "Trigger user's identity verification with configured verifyOptions"
      operationId: user.prototype.verify
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /users/confirm:
    get:
      tags:
        - user
      summary: Confirm a user registration with identity verification token.
      operationId: user.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /users/reset:
    post:
      tags:
        - user
      summary: Reset password for a user with email.
      operationId: user.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /users/change-password:
    post:
      tags:
        - user
      summary: "Change a user's password."
      operationId: user.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /users/reset-password:
    post:
      tags:
        - user
      summary: "Reset user's password via a password-reset token."
      operationId: user.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/roles/{id}/principals/{fk}':
    get:
      tags:
        - role
      summary: Find a related item by id for principals.
      operationId: role.prototype.__findById__principals
      parameters:
        - name: fk
          in: path
          description: Foreign key for principals
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/roleMapping'
      deprecated: false
    delete:
      tags:
        - role
      summary: Delete a related item by id for principals.
      operationId: role.prototype.__destroyById__principals
      parameters:
        - name: fk
          in: path
          description: Foreign key for principals
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - role
      summary: Update a related item by id for principals.
      operationId: role.prototype.__updateById__principals
      parameters:
        - name: fk
          in: path
          description: Foreign key for principals
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/roleMapping'
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/roleMapping'
      deprecated: false
  '/roles/{id}/users/{fk}':
    get:
      tags:
        - role
      summary: Find a related item by id for users.
      operationId: role.prototype.__findById__users
      parameters:
        - name: fk
          in: path
          description: Foreign key for users
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    delete:
      tags:
        - role
      summary: Delete a related item by id for users.
      operationId: role.prototype.__destroyById__users
      parameters:
        - name: fk
          in: path
          description: Foreign key for users
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - role
      summary: Update a related item by id for users.
      operationId: role.prototype.__updateById__users
      parameters:
        - name: fk
          in: path
          description: Foreign key for users
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/user'
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  '/roles/{id}/users/rel/{fk}':
    put:
      tags:
        - role
      summary: Add a related item by id for users.
      operationId: role.prototype.__link__users
      parameters:
        - name: fk
          in: path
          description: Foreign key for users
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/roleMapping'
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/roleMapping'
      deprecated: false
    delete:
      tags:
        - role
      summary: Remove the users relation to an item by id.
      operationId: role.prototype.__unlink__users
      parameters:
        - name: fk
          in: path
          description: Foreign key for users
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - role
      summary: Check the existence of users relation to an item by id.
      operationId: role.prototype.__exists__users
      parameters:
        - name: fk
          in: path
          description: Foreign key for users
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/roles/{id}/principals':
    get:
      tags:
        - role
      summary: Queries principals of role.
      operationId: role.prototype.__get__principals
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/roleMapping'
      deprecated: false
    post:
      tags:
        - role
      summary: Creates a new instance in principals of this model.
      operationId: role.prototype.__create__principals
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/roleMapping'
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/roleMapping'
      deprecated: false
    delete:
      tags:
        - role
      summary: Deletes all principals of this model.
      operationId: role.prototype.__delete__principals
      parameters:
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/roles/{id}/principals/count':
    get:
      tags:
        - role
      summary: Counts principals of role.
      operationId: role.prototype.__count__principals
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/roles/{id}/users':
    get:
      tags:
        - role
      summary: Queries users of role.
      operationId: role.prototype.__get__users
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
      deprecated: false
    post:
      tags:
        - role
      summary: Creates a new instance in users of this model.
      operationId: role.prototype.__create__users
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/user'
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    delete:
      tags:
        - role
      summary: Deletes all users of this model.
      operationId: role.prototype.__delete__users
      parameters:
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/roles/{id}/users/count':
    get:
      tags:
        - role
      summary: Counts users of role.
      operationId: role.prototype.__count__users
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /roles:
    post:
      tags:
        - role
      summary: Create a new instance of the model and persist it into the data source.
      operationId: role.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
    patch:
      tags:
        - role
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: role.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
    put:
      tags:
        - role
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: role.replaceOrCreate__put_roles
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
    get:
      tags:
        - role
      summary: Find all instances of the model matched by filter from the data source.
      operationId: role.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/role'
      deprecated: false
  /roles/replaceOrCreate:
    post:
      tags:
        - role
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: role.replaceOrCreate__post_roles_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
  /roles/upsertWithWhere:
    post:
      tags:
        - role
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: role.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
  '/roles/{id}/exists':
    get:
      tags:
        - role
      summary: Check whether a model instance exists in the data source.
      operationId: 'role.exists__get_roles_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/roles/{id}':
    head:
      tags:
        - role
      summary: Check whether a model instance exists in the data source.
      operationId: 'role.exists__head_roles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - role
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: role.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
    put:
      tags:
        - role
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'role.replaceById__put_roles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
    delete:
      tags:
        - role
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: role.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - role
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: role.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/role'
        - name: id
          in: path
          description: role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
  '/roles/{id}/replace':
    post:
      tags:
        - role
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'role.replaceById__post_roles_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
  /roles/findOne:
    get:
      tags:
        - role
      summary: Find first instance of the model matched by filter from the data source.
      operationId: role.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
  /roles/update:
    post:
      tags:
        - role
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: role.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/role'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /roles/count:
    get:
      tags:
        - role
      summary: Count instances of the model matched by where from the data source.
      operationId: role.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/hosts/{id}/vhosts/{fk}':
    get:
      tags:
        - host
      summary: Find a related item by id for vhosts.
      operationId: host.prototype.__findById__vhosts
      parameters:
        - name: fk
          in: path
          description: Foreign key for vhosts
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: host id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/vhost'
      deprecated: false
    delete:
      tags:
        - host
      summary: Delete a related item by id for vhosts.
      operationId: host.prototype.__destroyById__vhosts
      parameters:
        - name: fk
          in: path
          description: Foreign key for vhosts
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: host id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - host
      summary: Update a related item by id for vhosts.
      operationId: host.prototype.__updateById__vhosts
      parameters:
        - name: fk
          in: path
          description: Foreign key for vhosts
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/vhost'
        - name: id
          in: path
          description: host id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/vhost'
      deprecated: false
  '/hosts/{id}/vhosts':
    get:
      tags:
        - host
      summary: Queries vhosts of host.
      operationId: host.prototype.__get__vhosts
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: host id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/vhost'
      deprecated: false
    post:
      tags:
        - host
      summary: Creates a new instance in vhosts of this model.
      operationId: host.prototype.__create__vhosts
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/vhost'
        - name: id
          in: path
          description: host id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/vhost'
      deprecated: false
    delete:
      tags:
        - host
      summary: Deletes all vhosts of this model.
      operationId: host.prototype.__delete__vhosts
      parameters:
        - name: id
          in: path
          description: host id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/hosts/{id}/vhosts/count':
    get:
      tags:
        - host
      summary: Counts vhosts of host.
      operationId: host.prototype.__count__vhosts
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: host id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /hosts:
    post:
      tags:
        - host
      summary: Create a new instance of the model and persist it into the data source.
      operationId: host.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/host'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/host'
      deprecated: false
    patch:
      tags:
        - host
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: host.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/host'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/host'
      deprecated: false
    put:
      tags:
        - host
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: host.replaceOrCreate__put_hosts
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/host'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/host'
      deprecated: false
    get:
      tags:
        - host
      summary: Find all instances of the model matched by filter from the data source.
      operationId: host.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/host'
      deprecated: false
  /hosts/replaceOrCreate:
    post:
      tags:
        - host
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: host.replaceOrCreate__post_hosts_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/host'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/host'
      deprecated: false
  /hosts/upsertWithWhere:
    post:
      tags:
        - host
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: host.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/host'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/host'
      deprecated: false
  '/hosts/{id}/exists':
    get:
      tags:
        - host
      summary: Check whether a model instance exists in the data source.
      operationId: 'host.exists__get_hosts_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/hosts/{id}':
    head:
      tags:
        - host
      summary: Check whether a model instance exists in the data source.
      operationId: 'host.exists__head_hosts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - host
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: host.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/host'
      deprecated: false
    put:
      tags:
        - host
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'host.replaceById__put_hosts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/host'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/host'
      deprecated: false
    delete:
      tags:
        - host
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: host.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - host
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: host.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/host'
        - name: id
          in: path
          description: host id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/host'
      deprecated: false
  '/hosts/{id}/replace':
    post:
      tags:
        - host
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'host.replaceById__post_hosts_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/host'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/host'
      deprecated: false
  /hosts/findOne:
    get:
      tags:
        - host
      summary: Find first instance of the model matched by filter from the data source.
      operationId: host.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/host'
      deprecated: false
  /hosts/update:
    post:
      tags:
        - host
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: host.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/host'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /hosts/count:
    get:
      tags:
        - host
      summary: Count instances of the model matched by where from the data source.
      operationId: host.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /dns:
    post:
      tags:
        - dns
      summary: Create a new instance of the model and persist it into the data source.
      operationId: dns.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/dns'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/dns'
      deprecated: false
    patch:
      tags:
        - dns
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: dns.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/dns'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/dns'
      deprecated: false
    put:
      tags:
        - dns
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: dns.replaceOrCreate__put_dns
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/dns'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/dns'
      deprecated: false
    get:
      tags:
        - dns
      summary: Find all instances of the model matched by filter from the data source.
      operationId: dns.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/dns'
      deprecated: false
  /dns/replaceOrCreate:
    post:
      tags:
        - dns
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: dns.replaceOrCreate__post_dns_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/dns'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/dns'
      deprecated: false
  /dns/upsertWithWhere:
    post:
      tags:
        - dns
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: dns.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/dns'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/dns'
      deprecated: false
  '/dns/{id}/exists':
    get:
      tags:
        - dns
      summary: Check whether a model instance exists in the data source.
      operationId: 'dns.exists__get_dns_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/dns/{id}':
    head:
      tags:
        - dns
      summary: Check whether a model instance exists in the data source.
      operationId: 'dns.exists__head_dns_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - dns
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: dns.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/dns'
      deprecated: false
    put:
      tags:
        - dns
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'dns.replaceById__put_dns_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/dns'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/dns'
      deprecated: false
    delete:
      tags:
        - dns
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: dns.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - dns
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: dns.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/dns'
        - name: id
          in: path
          description: dns id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/dns'
      deprecated: false
  '/dns/{id}/replace':
    post:
      tags:
        - dns
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'dns.replaceById__post_dns_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/dns'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/dns'
      deprecated: false
  /dns/findOne:
    get:
      tags:
        - dns
      summary: Find first instance of the model matched by filter from the data source.
      operationId: dns.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/dns'
      deprecated: false
  /dns/update:
    post:
      tags:
        - dns
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: dns.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/dns'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /dns/count:
    get:
      tags:
        - dns
      summary: Count instances of the model matched by where from the data source.
      operationId: dns.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /log:
    post:
      tags:
        - log
      summary: Create a new instance of the model and persist it into the data source.
      operationId: log.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/log'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/log'
      deprecated: false
    patch:
      tags:
        - log
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: log.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/log'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/log'
      deprecated: false
    put:
      tags:
        - log
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: log.replaceOrCreate__put_log
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/log'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/log'
      deprecated: false
    get:
      tags:
        - log
      summary: Find all instances of the model matched by filter from the data source.
      operationId: log.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/log'
      deprecated: false
  /log/replaceOrCreate:
    post:
      tags:
        - log
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: log.replaceOrCreate__post_log_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/log'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/log'
      deprecated: false
  /log/upsertWithWhere:
    post:
      tags:
        - log
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: log.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/log'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/log'
      deprecated: false
  '/log/{id}/exists':
    get:
      tags:
        - log
      summary: Check whether a model instance exists in the data source.
      operationId: 'log.exists__get_log_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/log/{id}':
    head:
      tags:
        - log
      summary: Check whether a model instance exists in the data source.
      operationId: 'log.exists__head_log_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - log
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: log.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/log'
      deprecated: false
    put:
      tags:
        - log
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'log.replaceById__put_log_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/log'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/log'
      deprecated: false
    delete:
      tags:
        - log
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: log.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - log
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: log.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/log'
        - name: id
          in: path
          description: log id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/log'
      deprecated: false
  '/log/{id}/replace':
    post:
      tags:
        - log
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'log.replaceById__post_log_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/log'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/log'
      deprecated: false
  /log/findOne:
    get:
      tags:
        - log
      summary: Find first instance of the model matched by filter from the data source.
      operationId: log.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/log'
      deprecated: false
  /log/update:
    post:
      tags:
        - log
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: log.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/log'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /log/count:
    get:
      tags:
        - log
      summary: Count instances of the model matched by where from the data source.
      operationId: log.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  x-any:
    properties: {}
  accessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        $ref: '#/definitions/ObjectID'
    required:
      - id
    additionalProperties: false
  role:
    properties:
      description:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
      name:
        type: string
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
    required:
      - name
    additionalProperties: false
  roleMapping:
    description: Map principals to roles
    properties:
      id:
        $ref: '#/definitions/ObjectID'
      principalType:
        description: 'The principal type, such as USER, APPLICATION, ROLE, or user model name in case of multiple user models'
        type: string
      principalId:
        $ref: '#/definitions/ObjectID'
      roleId:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  user:
    properties:
      username:
        type: string
      realm:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - username
      - email
    additionalProperties: false
  vhost:
    properties:
      description:
        type: string
      dns:
        type: boolean
      hostNames:
        type: array
        items:
          type: string
      ip:
        type: string
      name:
        type: string
      prettyName:
        type: string
      version:
        type: number
        format: double
    required:
      - name
    additionalProperties: false
  host:
    properties:
      description:
        type: string
      hostNames:
        type: array
        items:
          type: string
      ip:
        type: string
      name:
        type: string
      prettyName:
        type: string
      relatedHosts:
        type: array
        items:
          type: object
      version:
        type: number
        format: double
      vhostsList:
        type: array
        items:
          $ref: '#/definitions/vhost'
    required:
      - name
    additionalProperties: false
  dns:
    properties:
      name:
        type: string
      ip:
        type: string
    required:
      - name
    additionalProperties: false
  log:
    properties:
      name:
        type: string
      hostname:
        type: string
      pid:
        type: number
        format: double
      level:
        type: number
        format: double
      model:
        type: string
      user:
        type: string
      hook:
        type: string
      target:
        type: string
      msg:
        type: string
      time:
        type: string
        format: date-time
      v:
        type: number
        format: double
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - name
      - level
      - msg
      - time
    additionalProperties: false
  ObjectID:
    type: string
    pattern: "^[a-fA-F\\d]{24}$"
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: lb_server
  version: 1.0.0
  title: lb_server
schemes:
  - https
  - http
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
